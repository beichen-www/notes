import{_ as e,o as t,c as a,a as n}from"./app.1f94238b.js";const b=JSON.parse('{"title":"webpack 常用指令","description":"","frontmatter":{},"headers":[],"relativePath":"fe/webpack/webpack-basis-order.md"}'),s={name:"fe/webpack/webpack-basis-order.md"},l=n('<h1 id="webpack-常用指令" tabindex="-1">webpack 常用指令 <a class="header-anchor" href="#webpack-常用指令" aria-hidden="true">#</a></h1><ol><li><p>Entry：入口指示， Webpack 以哪个为入口开始打包，分析构建内部以来图</p></li><li><p>output ：输出指示，Webpack 打包后的资源 bundles 输出到哪里去，以什么命名</p></li><li><p>loader : loader 让 Webpack 能去处理那些非 Javascript 文件 ( Webpack 自身只能理解 Jacascript )，例如：less sass ,img css ...</p></li><li><p>plugins : 插件用于执行范围更广的任务，插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等</p></li><li><p>Mode：指示 Webpack 使用相应模式的配置。如下所示</p></li></ol><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:center;">描述</th><th style="text-align:center;">特点</th></tr></thead><tbody><tr><td style="text-align:center;">development</td><td style="text-align:center;">将会 p<wbr>rocess.env.NODE_ENV 启用 NamedChunksPlugiOn 和 NamedModulesPlugin</td><td style="text-align:center;">能让代码本地调试运行环境</td></tr><tr><td style="text-align:center;">productin</td><td style="text-align:center;">将会 p<wbr>rocess.env.NODE_ENV.，启用 FlagDeoendencyUsagePlugin、 FlagIncudedChunksPlugin、FlaginckudedChunksPugin、OccurrenceOrderPlugin、SideEffectsFlagPlugin 、 UglifyjsPugin</td><td style="text-align:center;">能让代码优化上线运行的环境</td></tr></tbody></table>',3),r=[l];function c(i,d,p,o,_,g){return t(),a("div",null,r)}const h=e(s,[["render",c]]);export{b as __pageData,h as default};
