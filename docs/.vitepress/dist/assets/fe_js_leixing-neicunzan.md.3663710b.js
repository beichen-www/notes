import{_ as s,o as a,c as n,a as l}from"./app.1f94238b.js";const A=JSON.parse('{"title":"深入理解js数据类型与堆栈内存","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"理解数据类型","slug":"理解数据类型","link":"#理解数据类型","children":[{"level":3,"title":"动态类型","slug":"动态类型","link":"#动态类型","children":[]},{"level":3,"title":"隐式转换","slug":"隐式转换","link":"#隐式转换","children":[]},{"level":3,"title":"包装对象","slug":"包装对象","link":"#包装对象","children":[]},{"level":3,"title":"类型检测","slug":"类型检测","link":"#类型检测","children":[]}]},{"level":2,"title":"堆栈内存空间","slug":"堆栈内存空间","link":"#堆栈内存空间","children":[{"level":3,"title":"栈内存空间","slug":"栈内存空间","link":"#栈内存空间","children":[]},{"level":3,"title":"堆内存空间","slug":"堆内存空间","link":"#堆内存空间","children":[]}]},{"level":2,"title":"变量类型与堆栈内存的关系","slug":"变量类型与堆栈内存的关系","link":"#变量类型与堆栈内存的关系","children":[{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"引用数据类型","slug":"引用数据类型","link":"#引用数据类型","children":[]}]},{"level":2,"title":"变量复制","slug":"变量复制","link":"#变量复制","children":[{"level":3,"title":"基本数据类型的复制","slug":"基本数据类型的复制","link":"#基本数据类型的复制","children":[]},{"level":3,"title":"引用数据类型的复制","slug":"引用数据类型的复制","link":"#引用数据类型的复制","children":[]}]},{"level":2,"title":"深拷贝与浅拷贝","slug":"深拷贝与浅拷贝","link":"#深拷贝与浅拷贝","children":[]},{"level":2,"title":"代码地址","slug":"代码地址","link":"#代码地址","children":[]}],"relativePath":"fe/js/leixing-neicunzan.md"}'),o={name:"fe/js/leixing-neicunzan.md"},p=l(`<h1 id="深入理解js数据类型与堆栈内存" tabindex="-1">深入理解js数据类型与堆栈内存 <a class="header-anchor" href="#深入理解js数据类型与堆栈内存" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>在JavaScript中，它的内存分为三种类型：代码空间、栈空间、堆空间，其中代码空间用于存放可执行代码。</p><p>本文带大家来深入理解下栈空间与堆空间（堆内存与栈内存），欢迎各位感兴趣的开发者阅读本文。</p><h2 id="理解数据类型" tabindex="-1">理解数据类型 <a class="header-anchor" href="#理解数据类型" aria-hidden="true">#</a></h2><p>最新的 ECMAScript 标准定义了 9 种数据类型:</p><ul><li><p>6 种</p><p>原始类型，使用 typeof</p><p>运算符检查</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Undefined" target="_blank" rel="noreferrer">undefined</a>：<code>typeof instance === &quot;undefined&quot;</code></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Boolean" target="_blank" rel="noreferrer">boolean</a>：<code>typeof instance === &quot;boolean&quot;</code></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Number" target="_blank" rel="noreferrer">number</a>：<code>typeof instance === &quot;number&quot;</code></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/String" target="_blank" rel="noreferrer">string</a>：<code>typeof instance === &quot;string</code></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/BigInt" target="_blank" rel="noreferrer">bigInt</a>：<code>typeof instance === &quot;bigint&quot;</code></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol" target="_blank" rel="noreferrer">symbol</a> ：<code>typeof instance === &quot;symbol&quot;</code></li></ul></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Null" target="_blank" rel="noreferrer">null</a>：<code>typeof instance === &quot;object&quot;</code></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Object" target="_blank" rel="noreferrer">object</a>：<code>typeof instance === &quot;object&quot;</code>，任何构造函数对象实例的特殊非数据结构类型，也用做数据结构：new <a href="https://developer.mozilla.org/en-US/docs/Glossary/Object" target="_blank" rel="noreferrer">Object</a>，new <a href="https://developer.mozilla.org/en-US/docs/Glossary/Array" target="_blank" rel="noreferrer">Array</a>，new <a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FGlossary%2FMap" target="_blank" rel="noreferrer">Map</a>，new <a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FGlossary%2FSet" target="_blank" rel="noreferrer">Set</a>，new <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap" target="_blank" rel="noreferrer">WeakMap</a>，new <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet" target="_blank" rel="noreferrer">WeakSet</a>，new <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noreferrer">Date</a>，和几乎所有通过<code>new</code>关键词创建的东西。</p></li><li><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FGlossary%2FFunction" target="_blank" rel="noreferrer">function</a>：非数据结构，尽管 typeof 操作的结果是：<code>typeof instance === &quot;function&quot;</code>。这个结果是为 Function 的一个特殊缩写，尽管每个 Function 构造器都由 Object 构造器派生</p></li></ul><blockquote><p><code>typeof</code> 操作符的唯一目的就是检查数据类型，如果我们希望检查任何从 Object 派生出来的结构类型，使用 <code>typeof</code> 是不起作用的，因为总是会得到 <code>&quot;object&quot;</code>。检查 Object 种类的合适方式是使用 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FGlossary%2Finstanceof" target="_blank" rel="noreferrer">instanceof</a> 关键字。但即使这样也存在误差。</p></blockquote><h3 id="动态类型" tabindex="-1">动态类型 <a class="header-anchor" href="#动态类型" aria-hidden="true">#</a></h3><p>JavaScript 是一种<strong>弱类型</strong>或者说<strong>动态</strong>语言。我们不需要提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着我们可以使用同一个变量保存不同类型的数据：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">字符串类型</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// string类型</span></span>
<span class="line"><span style="color:#A6ACCD;">info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number类型</span></span>
<span class="line"><span style="color:#A6ACCD;">info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// boolean类型</span></span>
<span class="line"></span></code></pre></div><h3 id="隐式转换" tabindex="-1">隐式转换 <a class="header-anchor" href="#隐式转换" aria-hidden="true">#</a></h3><ul><li><code>+</code>和<code>-</code>运算符转换</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">20</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// &quot;206&quot; 字符串拼接 string + number = string</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">16</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 10 减法运算 string - number = number</span></span>
<span class="line"></span></code></pre></div><ul><li>比较运算符</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ==（等于），会自动转换数据类型再比较</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ===（严格等于），不会自动转换数据类型，如果数据类型不一致，返回false；如果一致，再比较。</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true，（undefined是null的子集）</span></span>
<span class="line"></span></code></pre></div><ul><li>NaN（Not a Number）这个特殊的Number与所有其他值都不相等，包括它自己：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// true (isNaN() 函数用于判断NaN)</span></span>
<span class="line"></span></code></pre></div><ul><li>浮点数相等比较</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值</span></span>
<span class="line"><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">abs</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0000001</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="包装对象" tabindex="-1">包装对象 <a class="header-anchor" href="#包装对象" aria-hidden="true">#</a></h3><p>在JavaScript中，<strong>一切皆对象</strong>。 <code>Array</code>（数组）和 <code>Function</code>（函数）本质上都是对象，就连三种原始类型的值 — — <code>Number</code>（数值）、<code>String</code>（字符串）、<code>Boolean</code>（布尔值） — — 在一定条件下，也会自动转为对象，也就是原始类型的 <strong>包装对象</strong>。</p><p>一般来说，只有对象是可以对属性进行读写操作的，但是我们平常用的很多的字符串方法和属性，都是通过<code>.</code>操作符访问的，例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">神奇的程序员</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是大白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>如上述代码所示，在我们调用这些方法和属性时，<strong>JS内部已经隐式地帮我们帮创建了一个包装对象</strong>了，上述代码JS在运行时会处理成这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">神奇的程序员</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是大白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>浏览器自己隐式创建的包装对象和我们显式创建的包装对象不严格相等，我们举个例子说明下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">神奇的程序员</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">神奇的程序员</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(name </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> info)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(name </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> info)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre></div><p>运行结果如下：</p><p><img src="https://static.developers.pub/af3fc521e7a04322be79370db64778e0" alt="af3fc521e7a04322be79370db64778e0"></p><h3 id="类型检测" tabindex="-1">类型检测 <a class="header-anchor" href="#类型检测" aria-hidden="true">#</a></h3><p>接下来我们来学习下js中几个常用的类型检测方法。</p><h4 id="typeof运算符" tabindex="-1">typeof运算符 <a class="header-anchor" href="#typeof运算符" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">typeof\`可以检测变量的数据类型，返回如下6种字符串\`number\`、\`string\`、\`boolean\`、\`object\`、\`undefined\`、\`function</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>我们举个例子说明下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> age)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> info)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> title)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// object，（null是空对象引用/或者说指针）。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> obj)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> arr)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// object </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> fn)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// function</span></span>
<span class="line"></span></code></pre></div><p>运行结果如下：</p><p><img src="https://static.developers.pub/40a78c460ae94ae1b82f8d3c92371907" alt="40a78c460ae94ae1b82f8d3c92371907"></p><h4 id="instanceof运算符" tabindex="-1">instanceof运算符 <a class="header-anchor" href="#instanceof运算符" aria-hidden="true">#</a></h4><ul><li><code>instanceof</code>，用于检测某个对象的原型链是否包含某个构造函数的 <code>prototype</code> 属性。</li><li><code>instanceof</code> 适用于检测对象，它是基于原型链运作的。</li><li><code>instanceof</code> 除了适用于任何 <code>object</code> 的类型检查之外，也可以用来检测内置对象，比如：<code>Array</code>、<code>RegExp</code>、<code>Object</code>、<code>Function</code></li><li><code>instanceof</code> 对基本数据类型检测不起作用，主要是因为基本数据类型没有原型链。</li></ul><p>我们举个例子来说明下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RegExp</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p>运行结果如下：</p><p><img src="https://static.developers.pub/b8d78aaf845d419199af6b2285aa559c" alt="b8d78aaf845d419199af6b2285aa559c"></p><h4 id="constructor属性" tabindex="-1">constructor属性 <a class="header-anchor" href="#constructor属性" aria-hidden="true">#</a></h4><p>构造函数属性,可确定当前对象的构造函数，我们举个例子说明下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> Object)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> Array)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p>运行结果如下：</p><p><img src="https://static.developers.pub/f6e7c66844794d528f086c5f9197929d" alt="f6e7c66844794d528f086c5f9197929d"></p><h4 id="hasownproperty属性" tabindex="-1">hasOwnProperty属性 <a class="header-anchor" href="#hasownproperty属性" aria-hidden="true">#</a></h4><p>判断属性是否存在于当前对象实例中（而不是原型对象中），我们举个例子来说明下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">书</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(info</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p>运行结果如下：</p><p><img src="https://static.developers.pub/92b54f9b2c704b77a96c522526081d8d" alt="92b54f9b2c704b77a96c522526081d8d"></p><h2 id="堆栈内存空间" tabindex="-1">堆栈内存空间 <a class="header-anchor" href="#堆栈内存空间" aria-hidden="true">#</a></h2><p>接下来，我们看下什么是堆、栈内存空间。</p><h3 id="栈内存空间" tabindex="-1">栈内存空间 <a class="header-anchor" href="#栈内存空间" aria-hidden="true">#</a></h3><p>见名知意，<strong>栈内存空间</strong> 就是用栈作为数据结构在内存中所申请的空间。</p><p>对栈这种数据结构不了解的开发者，请移步我的另一篇文章：<a href="https://juejin.cn/post/6844904069102829581" target="_blank" rel="noreferrer">数据结构:栈与队列</a>。</p><p>我们来回顾下<strong>栈</strong>的特点：</p><ul><li>后进先出，最后添加进栈的元素最先出。</li><li>访问栈底元素，必须拿掉它上面的元素。</li></ul><p>我们画个图来描述下栈，如下所示：</p><p><img src="https://static.developers.pub/43d4a57a9f92421db4dcbaec38caf2e0" alt="43d4a57a9f92421db4dcbaec38caf2e0"></p><h3 id="堆内存空间" tabindex="-1">堆内存空间 <a class="header-anchor" href="#堆内存空间" aria-hidden="true">#</a></h3><p>同样的，见名知意，<strong>堆内存空间</strong>就是用堆作为数据结构在内存中所申请的空间。</p><p>对堆这种数据结构不了解的开发者，请移步我的另外两篇文章：<a href="https://juejin.cn/post/6844904070969294856" target="_blank" rel="noreferrer">数据结构:堆</a>、<a href="https://juejin.cn/post/6854573211197046791" target="_blank" rel="noreferrer">实现二叉堆</a></p><p>通常情况下，我们所说的 <strong>堆</strong> 数据结构指的是 <strong>二叉堆</strong> ，我们来回顾下二叉堆的特点：</p><ul><li>它是一颗完全二叉树</li><li>二叉堆不是最小堆就是最大堆</li></ul><p>我们画个图来描述下 <strong>最大堆</strong> 与 <strong>最小堆</strong> ，如下所示：</p><p><img src="https://static.developers.pub/4600cd06e77a429686aff4050a4bca99" alt="4600cd06e77a429686aff4050a4bca99"></p><h2 id="变量类型与堆栈内存的关系" tabindex="-1">变量类型与堆栈内存的关系 <a class="header-anchor" href="#变量类型与堆栈内存的关系" aria-hidden="true">#</a></h2><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a></h3><p>我们知道JS的基本数据类型有7种：</p><ul><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>symbol</code></li><li><code>bigInt</code></li></ul><p>基本数据类型变量保存在栈内存中，因为基本数据类型占用空间小、大小固定，通过值来访问，属于被频繁使用的数据。</p><p>接下来，我们通过一个例子来讲解下，基本数据类型在栈内存中的存储：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上述代码中，我们定义了2个变量：</p><ul><li>name为<code>string</code>类型</li><li>age为<code>number</code>类型</li></ul><p>我们画个图来描述下它在栈内存的存储：</p><p><img src="https://static.developers.pub/1a75f2807968410aa001383bd7402bd1" alt="1a75f2807968410aa001383bd7402bd1"></p><blockquote><p>注意⚠️：闭包中的基本数据类型变量是保存在堆内存里的，当函数执行完弹出调用栈后，返回一个内部函数的一个引用，这时候函数的变量就会转移到堆上，因此内部函数依然能访问到上一层函数的变量。</p></blockquote><h3 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a></h3><p>除了上个章节提到的基本数据类型外，其他的都属于引用数据类型，例如：<code>Array</code>、<code>Function</code>、<code>Object</code>等。</p><p>引用数据类型存储在堆内存中，引用数据类型占据空间大、大小不固定，如果存储在栈中，将影响程序的运行性能。</p><p>引用数据类型会在栈中存储一个指针，这个指针指向堆内存空间中该实体的起始地址。</p><p>当解释器寻找引用值时，会先检索其在栈中的地址，取得地址后，从堆中获得实体。</p><p>我们举个例子来描述下上述话语：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 基本数据类型-栈内存</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 基本数据类型-栈内存</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 基本数据类型-栈内存</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对象指针存放在栈内存中，指针指向的对象放在堆内存中</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> msgObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">测试</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 数组的指针存放在栈内存中，指针指向的数组存放在堆内存中</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> ages </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">57</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p>上述代码中：</p><ul><li>我们创建了两个变量<code>msgObj</code>、<code>ages</code>，他们的值都是引用类型(object、array)</li><li>堆内存空间采用<code>二叉堆</code>作为数据结构，<code>msgObj</code>与<code>ages</code>的具体值会存在堆内存空间中</li><li>存储完成后，堆内存空间会返回这两个值的引用地址(指针)</li><li>拿到引用地址后，这个引用地址会和它的变量名对应起来，存放在栈内存空间中</li><li>在查找变量<code>msgObj</code>与<code>ages</code>的具体值时，会先从栈内存空间中获取它的引用地址</li><li>获取到引用地址后，通过引用地址在堆内存空间的二叉堆中查找到对应的值。</li></ul><p>我们画个图来描述下上述话语，如下所示：</p><p>堆内存空间中的<code>Object</code>，表示的是存储在空间中的其他对象的引用值。</p><p><img src="https://static.developers.pub/3c67c84fcefb45e79ccc4e4e3c1ec844" alt="3c67c84fcefb45e79ccc4e4e3c1ec844"></p><blockquote><p>我们来理解下堆内存空间与堆内存的区别：</p><p>堆内存空间：相当于一个采用二叉堆作为数据结构的容器。</p><p>堆内存：指的是一个引用类型的具体值。</p><p>堆内存存在于堆内存空间中。</p></blockquote><h2 id="变量复制" tabindex="-1">变量复制 <a class="header-anchor" href="#变量复制" aria-hidden="true">#</a></h2><p>接下来，我们从内存角度来看下变量复制。</p><h3 id="基本数据类型的复制" tabindex="-1">基本数据类型的复制 <a class="header-anchor" href="#基本数据类型的复制" aria-hidden="true">#</a></h3><p>我们通过一个例子来看下基本类型的复制，代码如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">神奇的程序员</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> alias </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">alias </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上述代码中：</p><ul><li><code>name</code>、<code>alias</code>都是基本类型，它们的值存储在栈内存。</li><li>它们分别有各自独立的栈空间</li><li>因此，修改<code>alias</code>的值，<code>name</code>不受影响</li></ul><p>我们画个图来描述下：</p><p><img src="https://static.developers.pub/9ffb2bfa3bf2435d97eb1fa52d66f610" alt="9ffb2bfa3bf2435d97eb1fa52d66f610"></p><h3 id="引用数据类型的复制" tabindex="-1">引用数据类型的复制 <a class="header-anchor" href="#引用数据类型的复制" aria-hidden="true">#</a></h3><p>接下来，我们通过一个例子来看下引用类型的复制，代码如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> book </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">书</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> book</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">故事书</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(book</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 故事书</span></span>
<span class="line"></span></code></pre></div><p>上述代码中：</p><ul><li><code>info</code>、<code>book</code>都是引用类型，它们的引用存在栈内存，值存在堆内存</li><li>它们的值指向同一块堆内存，栈内存中会复制一份相同的引用</li></ul><p>我们画个图来描述下：</p><p><img src="https://static.developers.pub/9ee14681c7f446bc8d302ea2b1816cdd" alt="9ee14681c7f446bc8d302ea2b1816cdd"></p><h2 id="深拷贝与浅拷贝" tabindex="-1">深拷贝与浅拷贝 <a class="header-anchor" href="#深拷贝与浅拷贝" aria-hidden="true">#</a></h2><p>通过上述章节的学习，我们了解到引用数据类型在复制时，改了其中一个数据的值，另一个数据的值也会跟着改变，这种拷贝方式我们称为<strong>浅拷贝</strong>。</p><p>在实际开发中，我们希望引用类型复制到新的变量后，二者是独立的，不会因为一个的改变而影响到另一个。这种拷贝方式就称为<strong>深拷贝</strong>。</p><p>深拷贝，实际上就是重新在堆内存中开辟一块新的空间，把原对象的数据拷贝到这个新地址空间里来，通常来说，我们有两种方法：</p><ul><li>转一遍JSON再转回来 ,但是这个办法有一个问题，这只能转化一般常见数据，function，undefined等类型都无法通过这种变回来</li><li>手动去写循环遍历</li></ul><p>我们来看下第一种方法，代码如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(data))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">data = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obj = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>运行结果如下：</p><p><img src="https://static.developers.pub/3912d88a1ab345c891301f88b52568be" alt="3912d88a1ab345c891301f88b52568be"></p><p>最后，我们来看下第二种写法，代码如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> item)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">神奇的程序员</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">data = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obj = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>运行结果如下：</p><p><img src="https://static.developers.pub/44797fee8a0c47a1a6a72f219955bf8e" alt="44797fee8a0c47a1a6a72f219955bf8e"></p><h2 id="代码地址" tabindex="-1">代码地址 <a class="header-anchor" href="#代码地址" aria-hidden="true">#</a></h2>`,125),e=[p];function t(c,r,y,D,i,C){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
